node {
  name: "arg_Placeholder_0_0"
  op: "_Arg"
  device: "/job:localhost/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index"
    value {
      i: 0
    }
  }
}
node {
  name: "retval_IF_branch_1_0_0"
  op: "_Retval"
  input: "GeOp12_0"
  device: "/job:localhost/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index"
    value {
      i: 0
    }
  }
}
node {
  name: "GeOp12_0"
  op: "GeOp"
  input: "arg_Placeholder_0_0"
  device: "/job:localhost/replica:0/task:0/device:CPU:0"
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_NpuOptimizer"
    value {
      s: "NpuOptimizer"
    }
  }
  attr {
    key: "_auto_tune_mode"
    value {
      s: ""
    }
  }
  attr {
    key: "_buffer_optimize"
    value {
      s: "l2_optimize"
    }
  }
  attr {
    key: "_compress_weight_conf"
    value {
      s: ""
    }
  }
  attr {
    key: "_debug_dir"
    value {
      s: ""
    }
  }
  attr {
    key: "_distribute_config"
    value {
      s: ""
    }
  }
  attr {
    key: "_do_npu_optimizer"
    value {
      s: "1"
    }
  }
  attr {
    key: "_dump_debug_mode"
    value {
      s: "all"
    }
  }
  attr {
    key: "_dump_mode"
    value {
      s: "output"
    }
  }
  attr {
    key: "_dump_path"
    value {
      s: ""
    }
  }
  attr {
    key: "_dump_step"
    value {
      s: ""
    }
  }
  attr {
    key: "_dynamic_dims"
    value {
      s: ""
    }
  }
  attr {
    key: "_dynamic_graph_execute_mode"
    value {
      s: "dynamic_execute"
    }
  }
  attr {
    key: "_dynamic_input"
    value {
      s: "0"
    }
  }
  attr {
    key: "_dynamic_node_type"
    value {
      s: ""
    }
  }
  attr {
    key: "_enable_compress_weight"
    value {
      s: "0"
    }
  }
  attr {
    key: "_enable_data_pre_proc"
    value {
      s: "0"
    }
  }
  attr {
    key: "_enable_dump"
    value {
      s: "0"
    }
  }
  attr {
    key: "_enable_dump_debug"
    value {
      s: "0"
    }
  }
  attr {
    key: "_enable_exception_dump"
    value {
      s: ""
    }
  }
  attr {
    key: "_enable_scope_fusion_passes"
    value {
      s: ""
    }
  }
  attr {
    key: "_enable_small_channel"
    value {
      s: "0"
    }
  }
  attr {
    key: "_fusion_switch_file"
    value {
      s: ""
    }
  }
  attr {
    key: "_graph_run_mode"
    value {
      s: "1"
    }
  }
  attr {
    key: "_hcom_multi_mode"
    value {
      s: ""
    }
  }
  attr {
    key: "_hcom_parallel"
    value {
      s: "0"
    }
  }
  attr {
    key: "_in_out_pair"
    value {
      s: ""
    }
  }
  attr {
    key: "_in_out_pair_flag"
    value {
      s: "1"
    }
  }
  attr {
    key: "_input_shape"
    value {
      s: ""
    }
  }
  attr {
    key: "_is_tailing_optimization"
    value {
      s: "0"
    }
  }
  attr {
    key: "_iterations_per_loop"
    value {
      s: "1"
    }
  }
  attr {
    key: "_job"
    value {
      s: "localhost"
    }
  }
  attr {
    key: "_local_device_list"
    value {
      s: ""
    }
  }
  attr {
    key: "_local_rank_id"
    value {
      s: "-1"
    }
  }
  attr {
    key: "_lower_functional_ops"
    value {
      s: "0"
    }
  }
  attr {
    key: "_mix_compile_mode"
    value {
      s: "0"
    }
  }
  attr {
    key: "_mstune_mode"
    value {
      s: ""
    }
  }
  attr {
    key: "_op_compiler_cache_dir"
    value {
      s: ""
    }
  }
  attr {
    key: "_op_compiler_cache_mode"
    value {
      s: ""
    }
  }
  attr {
    key: "_op_debug_level"
    value {
      s: "0"
    }
  }
  attr {
    key: "_op_select_implmode"
    value {
      s: ""
    }
  }
  attr {
    key: "_op_tune_mode"
    value {
      s: ""
    }
  }
  attr {
    key: "_optypelist_for_implmode"
    value {
      s: ""
    }
  }
  attr {
    key: "_precision_mode"
    value {
      s: ""
    }
  }
  attr {
    key: "_profiling_mode"
    value {
      s: "0"
    }
  }
  attr {
    key: "_profiling_options"
    value {
      s: ""
    }
  }
  attr {
    key: "_session_device_id"
    value {
      s: ""
    }
  }
  attr {
    key: "_stream_max_parallel_num"
    value {
      s: ""
    }
  }
  attr {
    key: "_task_index"
    value {
      s: "0"
    }
  }
  attr {
    key: "_use_off_line"
    value {
      s: "1"
    }
  }
  attr {
    key: "_variable_format_optimize"
    value {
      s: "1"
    }
  }
  attr {
    key: "_work_path"
    value {
      s: ""
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "function"
    value {
      func {
        name: "GeOp12_0"
      }
    }
  }
}
library {
  function {
    signature {
      name: "finall_branch2_0zkt64DYFRw"
      input_arg {
        name: "x_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "x"
        type: DT_FLOAT
      }
    }
    ret {
      key: "x"
      value: "x_0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
  function {
    signature {
      name: "finall_branch1_Y3CNZMF9Vv8"
      input_arg {
        name: "x"
        type: DT_FLOAT
      }
      output_arg {
        name: "if_branch_2"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "Greater/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0
          }
        }
      }
    }
    node_def {
      name: "Greater"
      op: "Greater"
      input: "x"
      input: "Greater/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "IF_branch_2"
      op: "If"
      input: "Greater:z:0"
      input: "x"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "finall_branch2_0zkt64DYFRw"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "finall_branch2_0zkt64DYFRw"
          }
        }
      }
    }
    ret {
      key: "if_branch_2"
      value: "IF_branch_2:output:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
  function {
    signature {
      name: "GeOp12_0"
      input_arg {
        name: "arg_Placeholder_0_0_0_arg"
        type: DT_FLOAT
      }
      output_arg {
        name: "IF_branch_1_0_retval"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Greater/y"
      op: "Const"
      device: "/job:localhost/replica:0/task:0/device:CPU:0"
      attr {
        key: "_NpuOptimizer"
        value {
          s: "NpuOptimizer"
        }
      }
      attr {
        key: "_iterations_per_loop"
        value {
          s: "1"
        }
      }
      attr {
        key: "_job"
        value {
          s: "localhost"
        }
      }
      attr {
        key: "_mix_compile_mode"
        value {
          s: "0"
        }
      }
      attr {
        key: "_use_off_line"
        value {
          s: "1"
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0
          }
        }
      }
    }
    node_def {
      name: "Greater"
      op: "Greater"
      input: "arg_Placeholder_0_0_0_arg"
      input: "Greater/y:output:0"
      device: "/job:localhost/replica:0/task:0/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "IF_branch_1"
      op: "If"
      input: "Greater:z:0"
      input: "arg_Placeholder_0_0_0_arg"
      device: "/job:localhost/replica:0/task:0/device:CPU:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "finall_branch1_Y3CNZMF9Vv8"
          }
        }
      }
      attr {
        key: "func_def"
        value {
          s: "\n\260\003\n7\n\032finall_branch1_Y3CNZMF9Vv8\022\005\n\001x\030\001\032\017\n\013if_branch_2\030\001\210\001\001\0326\n\tGreater/y\022\005Const*\025\n\005value\022\014B\n\010\001\022\000*\004\000\000\000\000*\013\n\005dtype\022\0020\001\0322\n\007Greater\022\007Greater\032\001x\032\022Greater/y:output:0*\007\n\001T\022\0020\001\032\276\001\n\013IF_branch_2\022\002If\032\013Greater:z:0\032\001x*-\n\013else_branch\022\036R\034\n\032finall_branch2_0zkt64DYFRw*\023\n\routput_shapes\022\002\n\000*\r\n\004Tout\022\005\n\0032\001\001*-\n\013then_branch\022\036R\034\n\032finall_branch2_0zkt64DYFRw*\013\n\005Tcond\022\0020\n*\014\n\003Tin\022\005\n\0032\001\001\"#\n\013if_branch_2\022\024IF_branch_2:output:0*#\n\035_disable_call_shape_inference\022\002(\001\n]\n,\n\032finall_branch2_0zkt64DYFRw\022\007\n\003x_0\030\001\032\005\n\001x\030\001\"\010\n\001x\022\003x_0*#\n\035_disable_call_shape_inference\022\002(\001\n]\n,\n\032finall_branch2_0zkt64DYFRw\022\007\n\003x_0\030\001\032\005\n\001x\030\001\"\010\n\001x\022\003x_0*#\n\035_disable_call_shape_inference\022\002(\001\n\260\003\n7\n\032finall_branch1_Y3CNZMF9Vv8\022\005\n\001x\030\001\032\017\n\013if_branch_2\030\001\210\001\001\0326\n\tGreater/y\022\005Const*\025\n\005value\022\014B\n\010\001\022\000*\004\000\000\000\000*\013\n\005dtype\022\0020\001\0322\n\007Greater\022\007Greater\032\001x\032\022Greater/y:output:0*\007\n\001T\022\0020\001\032\276\001\n\013IF_branch_2\022\002If\032\013Greater:z:0\032\001x*-\n\013then_branch\022\036R\034\n\032finall_branch2_0zkt64DYFRw*\013\n\005Tcond\022\0020\n*\014\n\003Tin\022\005\n\0032\001\001*-\n\013else_branch\022\036R\034\n\032finall_branch2_0zkt64DYFRw*\023\n\routput_shapes\022\002\n\000*\r\n\004Tout\022\005\n\0032\001\001\"#\n\013if_branch_2\022\024IF_branch_2:output:0*#\n\035_disable_call_shape_inference\022\002(\001\n]\n,\n\032finall_branch2_0zkt64DYFRw\022\007\n\003x_0\030\001\032\005\n\001x\030\001\"\010\n\001x\022\003x_0*#\n\035_disable_call_shape_inference\022\002(\001\n]\n,\n\032finall_branch2_0zkt64DYFRw\022\007\n\003x_0\030\001\032\005\n\001x\030\001\"\010\n\001x\022\003x_0*#\n\035_disable_call_shape_inference\022\002(\001"
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "finall_branch1_Y3CNZMF9Vv8"
          }
        }
      }
    }
    ret {
      key: "IF_branch_1_0_retval"
      value: "IF_branch_1:output:0"
    }
  }
}
versions {
  producer: 134
  min_consumer: 12
}
