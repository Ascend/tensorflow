/* Copyright (C) 2021. Huawei Technologies Co., Ltd. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#include "test_function_library.h"

REGISTER_TEST_FUNC(
  "    signature {"
  "      name: 'function_add'"
  "      input_arg {"
  "        name: 'a'"
  "        type: DT_FLOAT"
  "      }"
  "      output_arg {"
  "        name: 'o'"
  "        type: DT_FLOAT"
  "      }"
  "    }"
  "    node_def {"
  "      name: 'output'"
  "      op: 'Add'"
  "      input: 'a'"
  "      input: 'a'"
  "      attr {"
  "        key: 'T'"
  "        value {"
  "          type: DT_FLOAT"
  "        }"
  "      }"
  "    }"
  "    ret {"
  "      key: 'o'"
  "      value: 'output:z'"
  "    }");

REGISTER_TEST_FUNC(
  "signature {\n"
  "  name: \"function_while_consume_iterator\"\n"
  "  input_arg {\n"
  "    name: \"iterator\"\n"
  "    type: DT_RESOURCE\n"
  "  }\n"
  "  input_arg {\n"
  "    name: \"iterator_1\"\n"
  "    type: DT_VARIANT\n"
  "  }\n"
  "  is_stateful: true\n"
  "}\n"
  "node_def {\n"
  "  name: \"range/start\"\n"
  "  op: \"Const\"\n"
  "  attr {\n"
  "    key: \"dtype\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"value\"\n"
  "    value {\n"
  "      tensor {\n"
  "        dtype: DT_INT32\n"
  "        tensor_shape {\n"
  "        }\n"
  "        int_val: 0\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"range/limit\"\n"
  "  op: \"Const\"\n"
  "  attr {\n"
  "    key: \"dtype\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"value\"\n"
  "    value {\n"
  "      tensor {\n"
  "        dtype: DT_INT32\n"
  "        tensor_shape {\n"
  "        }\n"
  "        int_val: 10\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"range/delta\"\n"
  "  op: \"Const\"\n"
  "  attr {\n"
  "    key: \"dtype\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"value\"\n"
  "    value {\n"
  "      tensor {\n"
  "        dtype: DT_INT32\n"
  "        tensor_shape {\n"
  "        }\n"
  "        int_val: 1\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"range\"\n"
  "  op: \"Range\"\n"
  "  input: \"range/start:output:0\"\n"
  "  input: \"range/limit:output:0\"\n"
  "  input: \"range/delta:output:0\"\n"
  "  attr {\n"
  "    key: \"Tidx\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"sub\"\n"
  "  op: \"Sub\"\n"
  "  input: \"range/limit:output:0\"\n"
  "  input: \"range/start:output:0\"\n"
  "  attr {\n"
  "    key: \"T\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"floordiv\"\n"
  "  op: \"FloorDiv\"\n"
  "  input: \"sub:z:0\"\n"
  "  input: \"range/delta:output:0\"\n"
  "  attr {\n"
  "    key: \"T\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"mod\"\n"
  "  op: \"FloorMod\"\n"
  "  input: \"sub:z:0\"\n"
  "  input: \"range/delta:output:0\"\n"
  "  attr {\n"
  "    key: \"T\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"zeros_like\"\n"
  "  op: \"Const\"\n"
  "  attr {\n"
  "    key: \"dtype\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"value\"\n"
  "    value {\n"
  "      tensor {\n"
  "        dtype: DT_INT32\n"
  "        tensor_shape {\n"
  "        }\n"
  "        int_val: 0\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"NotEqual\"\n"
  "  op: \"NotEqual\"\n"
  "  input: \"mod:z:0\"\n"
  "  input: \"zeros_like:output:0\"\n"
  "  attr {\n"
  "    key: \"T\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"incompatible_shape_error\"\n"
  "    value {\n"
  "      b: true\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"Cast\"\n"
  "  op: \"Cast\"\n"
  "  input: \"NotEqual:z:0\"\n"
  "  attr {\n"
  "    key: \"DstT\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"SrcT\"\n"
  "    value {\n"
  "      type: DT_BOOL\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"Truncate\"\n"
  "    value {\n"
  "      b: false\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"add\"\n"
  "  op: \"AddV2\"\n"
  "  input: \"floordiv:z:0\"\n"
  "  input: \"Cast:y:0\"\n"
  "  attr {\n"
  "    key: \"T\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"zeros_like_1\"\n"
  "  op: \"Const\"\n"
  "  attr {\n"
  "    key: \"dtype\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"value\"\n"
  "    value {\n"
  "      tensor {\n"
  "        dtype: DT_INT32\n"
  "        tensor_shape {\n"
  "        }\n"
  "        int_val: 0\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"Maximum\"\n"
  "  op: \"Maximum\"\n"
  "  input: \"add:z:0\"\n"
  "  input: \"zeros_like_1:output:0\"\n"
  "  attr {\n"
  "    key: \"T\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"while/maximum_iterations\"\n"
  "  op: \"Const\"\n"
  "  attr {\n"
  "    key: \"dtype\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"value\"\n"
  "    value {\n"
  "      tensor {\n"
  "        dtype: DT_INT32\n"
  "        tensor_shape {\n"
  "        }\n"
  "        int_val: -1\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"while/loop_counter\"\n"
  "  op: \"Const\"\n"
  "  attr {\n"
  "    key: \"dtype\"\n"
  "    value {\n"
  "      type: DT_INT32\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"value\"\n"
  "    value {\n"
  "      tensor {\n"
  "        dtype: DT_INT32\n"
  "        tensor_shape {\n"
  "        }\n"
  "        int_val: 0\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "}\n"
  "node_def {\n"
  "  name: \"while\"\n"
  "  op: \"While\"\n"
  "  input: \"while/loop_counter:output:0\"\n"
  "  input: \"while/maximum_iterations:output:0\"\n"
  "  input: \"range/start:output:0\"\n"
  "  input: \"range/limit:output:0\"\n"
  "  input: \"iterator\"\n"
  "  input: \"range/delta:output:0\"\n"
  "  attr {\n"
  "    key: \"T\"\n"
  "    value {\n"
  "      list {\n"
  "        type: DT_INT32\n"
  "        type: DT_INT32\n"
  "        type: DT_INT32\n"
  "        type: DT_INT32\n"
  "        type: DT_RESOURCE\n"
  "        type: DT_INT32\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"_lower_using_switch_merge\"\n"
  "    value {\n"
  "      b: true\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"_num_original_outputs\"\n"
  "    value {\n"
  "      i: 6\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"_read_only_resource_inputs\"\n"
  "    value {\n"
  "      list {\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"body\"\n"
  "    value {\n"
  "      func {\n"
  "        name: \"while_body_30\"\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"cond\"\n"
  "    value {\n"
  "      func {\n"
  "        name: \"while_cond_29\"\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"output_shapes\"\n"
  "    value {\n"
  "      list {\n"
  "        shape {\n"
  "        }\n"
  "        shape {\n"
  "        }\n"
  "        shape {\n"
  "        }\n"
  "        shape {\n"
  "        }\n"
  "        shape {\n"
  "        }\n"
  "        shape {\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  attr {\n"
  "    key: \"parallel_iterations\"\n"
  "    value {\n"
  "      i: 10\n"
  "    }\n"
  "  }\n"
  "}");

REGISTER_TEST_FUNC(
  "  signature {\n"
  "    name: \"while_body_30\"\n"
  "    input_arg {\n"
  "      name: \"while_while_loop_counter\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_while_maximum_iterations\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_placeholder\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_range_limit_0\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_iteratorgetnext_iterator_0\"\n"
  "      type: DT_RESOURCE\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_add_range_delta_0\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    output_arg {\n"
  "      name: \"while_identity\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    output_arg {\n"
  "      name: \"while_identity_1\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    output_arg {\n"
  "      name: \"while_identity_2\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    output_arg {\n"
  "      name: \"while_range_limit\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    output_arg {\n"
  "      name: \"while_iteratorgetnext_iterator\"\n"
  "      type: DT_RESOURCE\n"
  "    }\n"
  "    output_arg {\n"
  "      name: \"while_add_range_delta\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    is_stateful: true\n"
  "    control_output: \"while/IteratorGetNext\"\n"
  "  }\n"
  "  node_def {\n"
  "    name: \"while/IteratorGetNext\"\n"
  "    op: \"IteratorGetNext\"\n"
  "    input: \"while_iteratorgetnext_iterator_0\"\n"
  "    attr {\n"
  "      key: \"_class\"\n"
  "      value {\n"
  "        list {\n"
  "          s: \"loc:@iterator\"\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "    attr {\n"
  "      key: \"output_shapes\"\n"
  "      value {\n"
  "        list {\n"
  "          shape {\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "    attr {\n"
  "      key: \"output_types\"\n"
  "      value {\n"
  "        list {\n"
  "          type: DT_INT64\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "    experimental_debug_info {\n"
  "      original_node_names: \"while/IteratorGetNext\"\n"
  "    }\n"
  "  }\n"
  "  node_def {\n"
  "    name: \"while/add\"\n"
  "    op: \"AddV2\"\n"
  "    input: \"while_placeholder\"\n"
  "    input: \"while_add_range_delta_0\"\n"
  "    attr {\n"
  "      key: \"T\"\n"
  "      value {\n"
  "        type: DT_INT32\n"
  "      }\n"
  "    }\n"
  "    experimental_debug_info {\n"
  "      original_node_names: \"while/add\"\n"
  "    }\n"
  "  }\n"
  "  node_def {\n"
  "    name: \"while/add_1/y\"\n"
  "    op: \"Const\"\n"
  "    attr {\n"
  "      key: \"dtype\"\n"
  "      value {\n"
  "        type: DT_INT32\n"
  "      }\n"
  "    }\n"
  "    attr {\n"
  "      key: \"value\"\n"
  "      value {\n"
  "        tensor {\n"
  "          dtype: DT_INT32\n"
  "          tensor_shape {\n"
  "          }\n"
  "          int_val: 1\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "    experimental_debug_info {\n"
  "      original_node_names: \"while/add_1/y\"\n"
  "    }\n"
  "  }\n"
  "  node_def {\n"
  "    name: \"while/add_1\"\n"
  "    op: \"AddV2\"\n"
  "    input: \"while_while_loop_counter\"\n"
  "    input: \"while/add_1/y:output:0\"\n"
  "    attr {\n"
  "      key: \"T\"\n"
  "      value {\n"
  "        type: DT_INT32\n"
  "      }\n"
  "    }\n"
  "    experimental_debug_info {\n"
  "      original_node_names: \"while/add_1\"\n"
  "    }\n"
  "  }\n"
  "  node_def {\n"
  "    name: \"while/Identity\"\n"
  "    op: \"Identity\"\n"
  "    input: \"while/add_1:z:0\"\n"
  "    input: \"^while/IteratorGetNext\"\n"
  "    attr {\n"
  "      key: \"T\"\n"
  "      value {\n"
  "        type: DT_INT32\n"
  "      }\n"
  "    }\n"
  "    experimental_debug_info {\n"
  "      original_node_names: \"while/Identity\"\n"
  "    }\n"
  "  }\n"
  "  node_def {\n"
  "    name: \"while/Identity_1\"\n"
  "    op: \"Identity\"\n"
  "    input: \"while_while_maximum_iterations\"\n"
  "    input: \"^while/IteratorGetNext\"\n"
  "    attr {\n"
  "      key: \"T\"\n"
  "      value {\n"
  "        type: DT_INT32\n"
  "      }\n"
  "    }\n"
  "    experimental_debug_info {\n"
  "      original_node_names: \"while/Identity_1\"\n"
  "    }\n"
  "  }\n"
  "  node_def {\n"
  "    name: \"while/Identity_2\"\n"
  "    op: \"Identity\"\n"
  "    input: \"while/add:z:0\"\n"
  "    input: \"^while/IteratorGetNext\"\n"
  "    attr {\n"
  "      key: \"T\"\n"
  "      value {\n"
  "        type: DT_INT32\n"
  "      }\n"
  "    }\n"
  "    experimental_debug_info {\n"
  "      original_node_names: \"while/Identity_2\"\n"
  "    }\n"
  "  }\n"
  "  ret {\n"
  "    key: \"while_add_range_delta\"\n"
  "    value: \"while_add_range_delta_0\"\n"
  "  }\n"
  "  ret {\n"
  "    key: \"while_identity\"\n"
  "    value: \"while/Identity:output:0\"\n"
  "  }\n"
  "  ret {\n"
  "    key: \"while_identity_1\"\n"
  "    value: \"while/Identity_1:output:0\"\n"
  "  }\n"
  "  ret {\n"
  "    key: \"while_identity_2\"\n"
  "    value: \"while/Identity_2:output:0\"\n"
  "  }\n"
  "  ret {\n"
  "    key: \"while_iteratorgetnext_iterator\"\n"
  "    value: \"while_iteratorgetnext_iterator_0\"\n"
  "  }\n"
  "  ret {\n"
  "    key: \"while_range_limit\"\n"
  "    value: \"while_range_limit_0\"\n"
  "  }\n"
  "  control_ret {\n"
  "    key: \"while/IteratorGetNext\"\n"
  "    value: \"while/IteratorGetNext\"\n"
  "  }\n"
  "  arg_attr {\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  arg_attr {\n"
  "    key: 1\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  arg_attr {\n"
  "    key: 2\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  arg_attr {\n"
  "    key: 3\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  arg_attr {\n"
  "    key: 4\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_class\"\n"
  "        value {\n"
  "          list {\n"
  "            s: \"loc:@iterator\"\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  arg_attr {\n"
  "    key: 5\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }");

REGISTER_TEST_FUNC(
  "  signature {\n"
  "    name: \"while_cond_29\"\n"
  "    input_arg {\n"
  "      name: \"while_while_loop_counter\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_while_maximum_iterations\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_placeholder\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_less_range_limit\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_while_cond_29___redundant_placeholder0\"\n"
  "      type: DT_RESOURCE\n"
  "    }\n"
  "    input_arg {\n"
  "      name: \"while_while_cond_29___redundant_placeholder1\"\n"
  "      type: DT_INT32\n"
  "    }\n"
  "    output_arg {\n"
  "      name: \"while_identity\"\n"
  "      type: DT_BOOL\n"
  "    }\n"
  "  }\n"
  "  node_def {\n"
  "    name: \"while/Less\"\n"
  "    op: \"Less\"\n"
  "    input: \"while_placeholder\"\n"
  "    input: \"while_less_range_limit\"\n"
  "    attr {\n"
  "      key: \"T\"\n"
  "      value {\n"
  "        type: DT_INT32\n"
  "      }\n"
  "    }\n"
  "    experimental_debug_info {\n"
  "      original_node_names: \"while/Less\"\n"
  "    }\n"
  "  }\n"
  "  node_def {\n"
  "    name: \"while/Identity\"\n"
  "    op: \"Identity\"\n"
  "    input: \"while/Less:z:0\"\n"
  "    attr {\n"
  "      key: \"T\"\n"
  "      value {\n"
  "        type: DT_BOOL\n"
  "      }\n"
  "    }\n"
  "    experimental_debug_info {\n"
  "      original_node_names: \"while/Identity\"\n"
  "    }\n"
  "  }\n"
  "  ret {\n"
  "    key: \"while_identity\"\n"
  "    value: \"while/Identity:output:0\"\n"
  "  }\n"
  "  arg_attr {\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  arg_attr {\n"
  "    key: 1\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  arg_attr {\n"
  "    key: 2\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  arg_attr {\n"
  "    key: 3\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  arg_attr {\n"
  "    key: 5\n"
  "    value {\n"
  "      attr {\n"
  "        key: \"_output_shapes\"\n"
  "        value {\n"
  "          list {\n"
  "            shape {\n"
  "              unknown_rank: true\n"
  "            }\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    }\n"
  "  }");